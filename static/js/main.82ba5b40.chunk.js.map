{"version":3,"sources":["routes.tsx","features/workouts/data/workouts.tsx","utils/workout-utils.tsx","features/workouts/components/workouts-list/WorkoutItem.tsx","utils/exercise-utils.tsx","features/workouts/components/workouts-list/ExerciseTable.tsx","features/workouts/components/workouts-list/WorkoutSummarySection.tsx","features/workouts/components/workouts-list/WorkoutSummaryActions.tsx","features/workouts/components/workouts-list/WorkoutSummary.tsx","features/workouts/components/workouts-list/WorkoutsList.tsx","features/workouts/components/workout/Workout.tsx","App.tsx","features/counter/counterAPI.ts","features/counter/counterSlice.ts","app/store.ts","serviceWorker.ts","index.tsx","features/workouts/components/workouts-list/WorkoutsList.module.css"],"names":["AppRoutes","Workout","id","workouts","name","level","description","sections","type","duration","circuit","quantity","unit","rest","instance","durationOf","workout","reduce","totalDuration","section","WorkoutItem","onSelected","selected","useMemo","workoutUtils","selectedClass","styles","caption","toLowerCase","title","content","WorkoutItemCard","props","tabIndex","className","item","onClick","onFocus","unitHeaderOf","exercise","ExerciseTable","length","exerciseUtils","map","WorkoutSummarySection","expanded","WorkoutSummaryActions","onToggle","onSelect","expandedDescription","WorkoutSummary","useState","setExpanded","setSelected","to","summary","invisible","WorkoutsList","container","list","undefined","setTimeout","updateSelection","WorkoutComponent","match","params","App","basename","path","exact","component","fetchCount","amount","Promise","resolve","data","incrementAsync","createAsyncThunk","a","response","counterSlice","createSlice","initialState","value","status","reducers","increment","state","decrement","incrementByAmount","action","payload","extraReducers","builder","addCase","pending","fulfilled","actions","store","configureStore","reducer","counter","counterReducer","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"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","file":"static/js/main.82ba5b40.chunk.js","sourcesContent":["const AppRoutes = {\n  Root: '/',\n  WorkoutsList: '/workouts',\n  Workout: '/workouts/:id',\n\n  Builder: {\n    Workout: (id: string) => `/workouts/${id}`,\n  },\n};\n\nexport { AppRoutes };\n","import { Workout } from '../../../types/workout';\n\nconst workouts: Workout[] = [\n  {\n    id: 'the-own-the-day-workout',\n    name: 'The Own The Day Workout',\n    level: 'Basic/Intermediate',\n    description:\n      'Derived directly from the philosophy built into Own The Day generally and the training pyramid specifically. This workout is perfect for beginners and people at an intermediate fitness level, and relies solely on body-weight movement, making it easy to do at home, in a dorm, or in an airport hotel room.',\n    sections: [\n      {\n        type: 'cardio',\n        duration: 10,\n        description:\n          'Run, bike, dance, row, swim, jump rope, shadow boxâ€”pick any one or any combination and go with it.',\n        circuit: [{ name: 'Chosen activity', quantity: 600, unit: 'seconds', rest: 30 }],\n      },\n      {\n        type: 'mobility',\n        duration: 10,\n        description:\n          'Circuit of Egyptians, lunge twists and standing leg circles. Do as many as possible in the allotted time.',\n        circuit: [\n          { name: 'Egyptian', rest: 3, quantity: 5, unit: 'repetitions' },\n          { name: 'Lunge Twist', rest: 3, quantity: 5, unit: 'repetitions' },\n          { name: 'Standing Leg Circle', rest: 3, quantity: 5, unit: 'repetitions' },\n        ],\n      },\n      {\n        type: 'power',\n        duration: 3,\n        description: 'Alternate split jump fox max height for 10 seconds, then 20 seconds rest. 6 sets.',\n        circuit: [{ name: 'Split Jump', rest: 20, quantity: 10, unit: 'seconds' }],\n      },\n      {\n        type: 'strength',\n        duration: 5,\n        description: 'Frog push ups, 5 seconds down, 5 seconds up. 5 sets of 3',\n        circuit: [\n          {\n            name: 'Frog push-ups',\n            rest: 5,\n            quantity: 3,\n            unit: 'repetitions',\n            description: '5 seconds down, 5 seconds up',\n          },\n        ],\n      },\n      {\n        type: 'muscular endurance',\n        duration: 8,\n        description: '4 sets of both plank (40 seconds + 20 of rest) and sit-through (40 seconds + 20 of rest)',\n        circuit: [\n          {\n            name: 'Plank',\n            quantity: 40,\n            unit: 'seconds',\n            rest: 20,\n          },\n          {\n            name: 'Sit-Through',\n            quantity: 40,\n            unit: 'seconds',\n            rest: 20,\n          },\n        ],\n      },\n      {\n        type: 'flexibility',\n        duration: 5,\n        description: 'Stretch and release, kneeling hip flexor stretch, kneeling hamstring strech and shoulder bridge',\n        circuit: [\n          {\n            name: 'Kneeling Hip Flexor Stretch - Left',\n            quantity: 50,\n            unit: 'seconds',\n            rest: 5,\n          },\n          {\n            name: 'Kneeling Hip Flexor Stretch - Right',\n            quantity: 50,\n            unit: 'seconds',\n            rest: 5,\n          },\n          {\n            name: 'Kneeling hamstring Stretch - Left',\n            quantity: 50,\n            unit: 'seconds',\n            rest: 5,\n          },\n          {\n            name: 'Kneeling hamstring Stretch - Right',\n            quantity: 50,\n            unit: 'seconds',\n            rest: 5,\n          },\n          {\n            name: 'Shouldder Bridge',\n            quantity: 80,\n            unit: 'seconds',\n            rest: 0,\n          },\n        ],\n      },\n    ],\n  },\n  {\n    id: 'the-own-the-day-workout---kettlebell',\n    name: 'The Own The Day Workout - Kettlebell',\n    level: 'Intermediate/Advanced',\n    description:\n      'This workout is designed for those between the intermediate and advanced fitness levels and uses a single kettlebell (find the right weight for your ability) to make the workout similarly easy to knock out.',\n    sections: [\n      {\n        type: 'cardio',\n        duration: 10,\n        description:\n          'Run, bike, dance, row, swim, jump rope, shadow boxâ€”pick any one or any combination and go with it.',\n        circuit: [],\n      },\n      {\n        type: 'mobility',\n        duration: 10,\n        description:\n          'The following drills should be performed in a circuit fashion for as many rounds as possible in the allotted time.',\n        circuit: [],\n      },\n      {\n        type: 'power',\n        duration: 3,\n        description: 'Sumo Squat Jumps, 10 seconds, then 20 seconds rest, 6 sets',\n        circuit: [],\n      },\n      {\n        type: 'strength',\n        duration: 5,\n        description: 'Super Slow Presses, 5 seconds up, 5 seconds down, 5 sets of 3 reps',\n        circuit: [],\n      },\n      {\n        type: 'muscular endurance',\n        duration: 8,\n        description: 'Perform the following drills for as many rounds as possible in 8 minutes',\n        circuit: [],\n      },\n      {\n        type: 'flexibility',\n        duration: 5,\n        description: 'Stretch and release, couch strech, pigeon pose, standing forward fold',\n        circuit: [],\n      },\n    ],\n  },\n  {\n    id: 'the-own-the-day-workout---pro',\n    name: 'The Own The Day Workout - Pro',\n    level: 'Advanced',\n    description:\n      'To really take your training to the next level, youâ€™ll need additional resources beyond this book. Check out www.OnnitAcademy.com for some ideas on where to get started.',\n    sections: [],\n  },\n];\n\nexport { workouts };\n","import { Workout, WorkoutSection, Minutes } from '../types/workout';\n\nclass WorkoutUtils {\n  durationOf = (workout: Workout): Minutes => {\n    return workout.sections.reduce((totalDuration: Minutes, section: WorkoutSection) => {\n      return totalDuration + section.duration;\n    }, 0);\n  };\n}\n\nconst instance: WorkoutUtils = new WorkoutUtils();\n\nexport { instance as workoutUtils };\n","import React, { useMemo } from 'react';\n\nimport { Minutes, Workout } from '../../../../types/workout';\nimport { workoutUtils } from '../../../../utils/workout-utils';\n\nimport styles from './WorkoutsList.module.css';\n\ninterface Props {\n  workout: Workout;\n  onSelected: () => void;\n  selected: boolean;\n}\n\nconst WorkoutItem = ({ workout, onSelected, selected }: Props) => {\n  const totalDuration: Minutes = useMemo(() => workoutUtils.durationOf(workout), [workout]);\n\n  return (\n    <WorkoutItemCard\n      selectedClass={selected ? styles['item-selected'] : ''}\n      onSelected={onSelected}\n      caption={`${workout.level.toLowerCase()} - ${totalDuration} minutes`}\n      title={workout.name}\n      content={workout.description}\n    />\n  );\n};\n\ninterface CardProps {\n  selectedClass: string;\n  onSelected: () => void;\n  caption: string;\n  title: string;\n  content: string;\n}\n\nconst WorkoutItemCard = (props: CardProps) => {\n  return (\n    <div\n      tabIndex={0}\n      className={`${styles.item} ${props.selectedClass} card p-6 bg-light r-base sk-card-wide`}\n      onClick={props.onSelected}\n      onFocus={props.onSelected}\n    >\n      <div className=\"card-caption mb-2\">\n        <span className=\"caption caption-positive\">{props.caption}</span>\n      </div>\n      <div className=\"card-head\">\n        <h2 className=\"heading-medium\">{props.title}</h2>\n      </div>\n      <div className=\"card-body mt-3\">\n        <p className=\"text-medium\">{props.content}</p>\n      </div>\n    </div>\n  );\n};\n\nexport { WorkoutItem };\n","import { Exercise } from '../types/workout';\n\nclass ExerciseUtils {\n  unitHeaderOf = (exercise: Exercise) => {\n    return exercise.unit === 'seconds' ? 'Duration' : 'Repetitions';\n  };\n}\n\nconst instance: ExerciseUtils = new ExerciseUtils();\n\nexport { instance as exerciseUtils };\n","import React from 'react';\n\nimport { Exercise, WorkoutSection } from '../../../../types/workout';\nimport { exerciseUtils } from '../../../../utils/exercise-utils';\n\nimport styles from './WorkoutsList.module.css';\n\ninterface Props {\n  section: WorkoutSection;\n}\n\nconst ExerciseTable = ({ section }: Props) => {\n  if (!section.circuit || section.circuit.length === 0) {\n    return null;\n  }\n\n  return (\n    <table className={`${styles['exercise-table']} mt-2 mb-1 table-bordered animate__animated animate__fadeIn`}>\n      <thead>\n        <tr>\n          <th className=\"w-50\">Excercise</th>\n          <th className={`w-25`}>{exerciseUtils.unitHeaderOf(section.circuit[0])}</th>\n          <th>Rest</th>\n        </tr>\n      </thead>\n      <tbody>\n        {section.circuit.map((exercise: Exercise) => (\n          <tr key={exercise.name}>\n            <td className=\"w-50\">{exercise.name}</td>\n            <td className=\"w-25\">\n              {exercise.quantity} {exercise.unit}\n            </td>\n            <td>{exercise.rest} seconds</td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n\nexport { ExerciseTable };\n","import React from 'react';\n\nimport { WorkoutSection } from '../../../../types/workout';\nimport { ExerciseTable } from './ExerciseTable';\n\nimport styles from './WorkoutsList.module.css';\n\ninterface Props {\n  section: WorkoutSection;\n  expanded: boolean;\n}\n\nconst WorkoutSummarySection = ({ section, expanded }: Props) => {\n  return (\n    <section>\n      <h4 className={styles['summary-section-title']}>\n        {section.type} <span className=\"label\">{section.duration} min</span>\n      </h4>\n      <p className={`${styles['summary-section-content']} text-medium`}>{section.description}</p>\n      {expanded && <ExerciseTable section={section} />}\n    </section>\n  );\n};\n\nexport { WorkoutSummarySection };\n","import React from 'react';\n\nimport styles from './WorkoutsList.module.css';\n\ninterface Props {\n  expandedDescription: boolean;\n  onToggle: () => void;\n  onSelect: () => void;\n}\n\nconst WorkoutSummaryActions = ({ onToggle, onSelect, expandedDescription }: Props) => {\n  return (\n    <div className={`row row-2 ${styles['summary-actions']}`}>\n      <button className=\"button button-small button-primary\" onClick={onSelect}>\n        Select\n      </button>\n      <button className=\"button button-small\" onClick={onToggle}>\n        {expandedDescription ? 'Hide' : 'Show'} complete description\n      </button>\n    </div>\n  );\n};\n\nexport { WorkoutSummaryActions };\n","import React, { useState } from 'react';\nimport { Redirect } from 'react-router';\n\nimport { AppRoutes } from '../../../../routes';\nimport { Workout } from '../../../../types/workout';\nimport { WorkoutSummarySection } from './WorkoutSummarySection';\nimport { WorkoutSummaryActions } from './WorkoutSummaryActions';\n\nimport styles from './WorkoutsList.module.css';\n\ninterface Props {\n  workout: Workout | undefined;\n}\n\nconst WorkoutSummary = ({ workout }: Props) => {\n  const [expanded, setExpanded] = useState(false);\n  const [selected, setSelected] = useState(false);\n\n  if (!workout) {\n    return <div className={`${styles.summary} ${styles.invisible}`} />;\n  }\n\n  if (selected) {\n    return <Redirect to={AppRoutes.Builder.Workout(workout.id)} />;\n  }\n\n  return (\n    <div className={`${styles.summary} card b-dark-10 bg-light r-base flex animate__animated animate__fadeIn`}>\n      <div className=\"card-box p-6 pb-10\">\n        <div className=\"card-caption mb-2\">\n          <span className=\"label label-positive text-large\">{workout.name}</span>\n          <WorkoutSummaryActions\n            expandedDescription={expanded}\n            onSelect={() => setSelected(true)}\n            onToggle={() => setExpanded((expanded) => !expanded)}\n          />\n        </div>\n        <div className=\"card-body mt-3\">\n          {workout.sections.map((section) => (\n            <WorkoutSummarySection section={section} expanded={expanded} key={section.type} />\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport { WorkoutSummary };\n","import React, { useState } from 'react';\n\nimport { workouts } from '../../data/workouts';\nimport { WorkoutItem } from './WorkoutItem';\nimport { WorkoutSummary } from './WorkoutSummary';\nimport { Workout } from '../../../../types/workout';\n\nimport styles from './WorkoutsList.module.css';\n\nconst WorkoutsList = () => {\n  const [selected, setSelected] = useState<Workout>();\n  const updateSelection = (workout: Workout) => {\n    setSelected(undefined);\n    setTimeout(() => setSelected(workout), 30);\n  };\n\n  return (\n    <div>\n      <h1>Workouts</h1>\n      <div className={styles.container}>\n        <ul className={styles.list}>\n          {workouts.map((workout) => (\n            <li key={workout.id} className={styles['list-item']}>\n              <WorkoutItem\n                workout={workout}\n                onSelected={() => updateSelection(workout)}\n                selected={workout === selected}\n              />\n            </li>\n          ))}\n        </ul>\n        <WorkoutSummary workout={selected} />\n      </div>\n    </div>\n  );\n};\n\nexport { WorkoutsList };\n","import React from 'react';\nimport { RouteComponentProps } from 'react-router';\n\ninterface PathParams {\n  id: string;\n}\n\nconst WorkoutComponent = (props: RouteComponentProps<PathParams>) => {\n  return (\n    <div>\n      <h2>Workout Page. ID: {props.match.params.id}</h2>\n    </div>\n  );\n};\n\nexport { WorkoutComponent as Workout };\n","import React from 'react';\nimport { BrowserRouter as Router, Route, Redirect, Switch } from 'react-router-dom';\n\nimport { AppRoutes } from './routes';\nimport { WorkoutsList } from './features/workouts/components/workouts-list';\nimport { Workout } from './features/workouts/components/workout';\n\nconst App = () => {\n  return (\n    <Router basename=\"/react-redux-workouts\">\n      <Switch>\n        <Route path={AppRoutes.WorkoutsList} exact={true} component={WorkoutsList} />\n        <Route path={AppRoutes.Workout} exact={true} component={Workout} />\n        <Redirect path={AppRoutes.Root} to={AppRoutes.WorkoutsList} />\n      </Switch>\n    </Router>\n  );\n};\n\nexport { App };\n","// A mock function to mimic making an async request for data\nexport function fetchCount(amount = 1) {\n  return new Promise<{ data: number }>((resolve) =>\n    setTimeout(() => {\n      resolve({ data: amount });\n    }, 500)\n  );\n}\n","import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { RootState, AppThunk } from '../../app/store';\nimport { fetchCount } from './counterAPI';\n\nexport interface CounterState {\n  value: number;\n  status: 'idle' | 'loading' | 'failed';\n}\n\nconst initialState: CounterState = {\n  value: 0,\n  status: 'idle',\n};\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\nexport const incrementAsync = createAsyncThunk('counter/fetchCount', async (amount: number) => {\n  const response = await fetchCount(amount);\n  // The value we return becomes the `fulfilled` action payload\n  return response.data;\n});\n\nexport const counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    increment: (state) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    decrement: (state) => {\n      state.value -= 1;\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    incrementByAmount: (state, action: PayloadAction<number>) => {\n      state.value += action.payload;\n    },\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: (builder) => {\n    builder\n      .addCase(incrementAsync.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(incrementAsync.fulfilled, (state, action) => {\n        state.status = 'idle';\n        state.value += action.payload;\n      });\n  },\n});\n\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectCount = (state: RootState) => state.counter.value;\n\n// We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\nexport const incrementIfOdd = (amount: number): AppThunk => {\n  return (dispatch, getState) => {\n    const currentValue = selectCount(getState());\n    if (currentValue % 2 === 1) {\n      dispatch(incrementByAmount(amount));\n    }\n  };\n};\n\nexport default counterSlice.reducer;\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\nimport counterReducer from '../features/counter/counterSlice';\n\nexport const store = configureStore({\n  reducer: {\n    counter: counterReducer,\n  },\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<ReturnType, RootState, unknown, Action<string>>;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"WorkoutsList_container__QZffj\",\"list\":\"WorkoutsList_list__3mHbx\",\"list-item\":\"WorkoutsList_list-item__S2IN3\",\"item\":\"WorkoutsList_item__p_03s\",\"item-selected\":\"WorkoutsList_item-selected__1xh42\",\"summary\":\"WorkoutsList_summary__3D3iy\",\"invisible\":\"WorkoutsList_invisible__17pmf\",\"summary-section-title\":\"WorkoutsList_summary-section-title__1mZhC\",\"summary-section-content\":\"WorkoutsList_summary-section-content__3OUbq\",\"summary-actions\":\"WorkoutsList_summary-actions__jucme\",\"exercise-table\":\"WorkoutsList_exercise-table__2dRgt\"};"],"sourceRoot":""}